rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{uid}/comments/{comment_id} {
      allow create: if isUserAuthenticated(uid)
                    && incomingData().keys().hasOnly(['blogId', 'commentId', 'commentRef', 'userId', 'userRef', 'author', 'content', 'createdAt', 'updatedAt'])
                    && validateRef(incomingData().commentRef)
                    && validateRef(incomingData().userRef)
                    && validateString(incomingData().blogId, 1, 100)
                    && validateString(incomingData().commentId, 10, 40)
                    && validateString(incomingData().userId, 10, 40)
                    && validateString(incomingData().author, 1, 100)
                    && validateString(incomingData().content, 1, 1024)
                    && validateTimestamp(incomingData().createdAt)
                    && validateTimestamp(incomingData().updatedAt)
    }

    match /{document=**} {
      allow read, write: if false;
    }

    // --------------------
    // helper functions

    function isAuthenticated() {
      return request.auth != null
    }

    function isUserAuthenticated(uid) {
      return isAuthenticated()
        && request.auth.uid == uid;
    }

    function incomingData() {
      return request.resource.data;
    }

    function validateRef(fieldRef) {
      return fieldRef is path;
    }

    function validateString(fieldText, min, max) {
      return fieldText is string && min <= fieldText.size() && fieldText.size() <= max;
    }

    function validateTimestamp(fieldTimestamp) {
      return fieldTimestamp is timestamp
    }

  }
}
